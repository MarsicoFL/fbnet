[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/Caseexample.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Network visualization","text":"first, fbnet library loaded. can install fbnet useful packages following lines:","code":"install.packages(\"fbnet\")  install.packages(\"pedtools\")  install.packages(\"mispitools\")  install.packages(\"forrel\")  library(fbnet) library(pedtools) library(mispitools) library(forrel)"},{"path":"/articles/Caseexample.html","id":"setting-up-the-pedigree","dir":"Articles","previous_headings":"","what":"Setting up the pedigree","title":"Network visualization","text":"example, use pedtools library pedigree definition. Also, forrel R library provides framework genotype simulations, mispitools library allows working different reference allele frequencies databases.  , pedigree genetic information paternal grand uncle.","code":"Freqs <- lapply(getfreqs(Argentina), function(x) {x[x!=0]}) ped = linearPed(3) ped = addChildren(ped, father =  1, mother =  2) ped = pedtools::setMarkers(ped, locusAttributes = Freqs[1:3]) plot(ped, hatched = 8) ped = profileSim(ped, N = 1, ids = 8, numCores = 10)[[1]] #> Preparing parallelisation using 10 cores"},{"path":"/articles/Caseexample.html","id":"from-pedtools-to-fbnet-ped-format","dir":"Articles","previous_headings":"","what":"From pedtools to fbnet ped format","title":"Network visualization","text":"ConvertPedFormat function, fbnet, allows working pedtools pedigree format.","code":"ped_fbnet <- convertPedformat(ped)"},{"path":"/articles/Caseexample.html","id":"analyzing-the-pedigree","dir":"Articles","previous_headings":"","what":"Analyzing the pedigree","title":"Network visualization","text":"Now can put thing work fbnet.","code":"pbn  <- initBN(ped_fbnet) bnet <- buildBN(pbn,QP=7) bn1  <- buildCPTs(bnet)  resQ <- velim.bn(bn1,ordMethod=\"min_fill\",verbose=FALSE)"},{"path":"/articles/Caseexample.html","id":"network-visualization-with-igraph","dir":"Articles","previous_headings":"","what":"Network visualization with igraph","title":"Network visualization","text":"visualizing network igraph package installed loaded.  previously explained, nodes represent alleles edges conditional relationships. node name represents: ID_marker_allele. Id individual number, marker name genetic marker, allele paternal (p) maternal (m). Due complexity network, iterative visualization better option.","code":"install.packages(\"igraph\") library(igraph) plot(bnet[[\"DAG\"]], layout=layout_with_fr, vertex.size=4,      vertex.label.dist=0.7, vertex.label.color = \"black\", vertex.label.size = 20, vertex.color=\"black\", edge.arrow.size=0.5)"},{"path":"/articles/Caseexample.html","id":"network-visualization-with-networkd3","dir":"Articles","previous_headings":"","what":"Network visualization with networkD3","title":"Network visualization","text":"First, iterative network visualization networkD3 must installed follows: Iterative network visualized follows:","code":"install.packages(\"networkD3\") library(networkD3) simpleNetwork(as_long_data_frame(bnet[[\"DAG\"]]), Source = 5, Target = 17, nodeColour = \"black\")"},{"path":"/articles/Network.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Network visualization","text":"first, fbnet library loaded. can install fbnet useful packages following lines:","code":"install.packages(\"fbnet\")  install.packages(\"pedtools\")  install.packages(\"mispitools\")  install.packages(\"forrel\")  library(fbnet) library(pedtools) library(mispitools) library(forrel)"},{"path":"/articles/Network.html","id":"setting-up-the-pedigree","dir":"Articles","previous_headings":"","what":"Setting up the pedigree","title":"Network visualization","text":"example, use pedtools library pedigree definition. Also, forrel R library provides framework genotype simulations, mispitools library allows working different reference allele frequencies databases.  , pedigree genetic information paternal grand uncle.","code":"Freqs <- lapply(getfreqs(Argentina), function(x) {x[x!=0]}) ped = linearPed(3) ped = addChildren(ped, father =  1, mother =  2) ped = pedtools::setMarkers(ped, locusAttributes = Freqs[1:3]) plot(ped, hatched = 8) ped = profileSim(ped, N = 1, ids = 8, numCores = 10)[[1]] #> Preparing parallelisation using 10 cores"},{"path":"/articles/Network.html","id":"from-pedtools-to-fbnet-ped-format","dir":"Articles","previous_headings":"","what":"From pedtools to fbnet ped format","title":"Network visualization","text":"ConvertPedFormat function, fbnet, allows working pedtools pedigree format.","code":"ped_fbnet <- convertPedformat(ped)"},{"path":"/articles/Network.html","id":"analyzing-the-pedigree","dir":"Articles","previous_headings":"","what":"Analyzing the pedigree","title":"Network visualization","text":"Now can put thing work fbnet.","code":"pbn  <- initBN(ped_fbnet) bnet <- buildBN(pbn,QP=7) bn1  <- buildCPTs(bnet)  resQ <- velim.bn(bn1,ordMethod=\"min_fill\",verbose=FALSE)"},{"path":"/articles/Network.html","id":"network-visualization-with-igraph","dir":"Articles","previous_headings":"","what":"Network visualization with igraph","title":"Network visualization","text":"visualizing network igraph package installed loaded.  previously explained, nodes represent alleles edges conditional relationships. node name represents: ID_marker_allele. Id individual number, marker name genetic marker, allele paternal (p) maternal (m). Due complexity network, iterative visualization better option.","code":"install.packages(\"igraph\") library(igraph) plot(bnet[[\"DAG\"]], layout=layout_with_fr, vertex.size=4,      vertex.label.dist=0.7, vertex.label.color = \"black\", vertex.label.size = 20, vertex.color=\"black\", edge.arrow.size=0.5)"},{"path":"/articles/Network.html","id":"network-visualization-with-networkd3","dir":"Articles","previous_headings":"","what":"Network visualization with networkD3","title":"Network visualization","text":"First, iterative network visualization networkD3 must installed follows: simpleNetwork(as_long_data_frame(bnet[[“DAG”]]), Source = 5, Target = 17, nodeColour = “black”) ?simpleNetwork Iterative network visualized follows:","code":"install.packages(\"networkD3\") library(networkD3) simpleNetwork(as_long_data_frame(bnet[[\"DAG\"]]), Source = 5, Target = 17, nodeColour = \"black\")"},{"path":"/articles/fbnet.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"fbnet","text":"first, fbnet library loaded. can install fbnet pasting following lines:","code":"install.packages(\"fbnet\")  library(fbnet)"},{"path":"/articles/fbnet.html","id":"setting-up-the-pedigree","dir":"Articles","previous_headings":"","what":"Setting up the pedigree","title":"fbnet","text":"“Toyped” pedigree example provided fbnet package. Also, fbnet work pedigree object produced pedtools R package. observed, “Toyped” pedigree three members (Ids 1, 2 3). FID father ID, MID mother ID. Therefore, 1 2 founders ID 3 parents 1 2. first step fbnet pedigree processing initialize Bayesian Network initBN function. generated, pbn object stores parameters, reference population allele frequencies. example two markers analyzed, M1 M2, four alleles one. mother (ID 2) genotyped, M1_p, mothers paternal allele M1_m mothers maternal allele.","code":"toyped[[\"pedigree\"]] #>      ID FID MID SEX AFF #> [1,]  1   0   0   1   1 #> [2,]  2   0   0   2   1 #> [3,]  3   1   2   1   1 pbn  <- initBN(toyped) pbn[[\"alelFreq\"]] #> $M1 #>   A   B   C   D  #> 0.1 0.2 0.3 0.4  #>  #> $M2 #>    A    B    C    D  #> 0.25 0.25 0.25 0.25 pbn[[\"markerEvidence\"]] #>   M1_p M1_m M2_p M2_m #> 2 \"D\"  \"D\"  \"B\"  \"C\""},{"path":"/articles/fbnet.html","id":"building-the-bayesian-network","dir":"Articles","previous_headings":"","what":"Building the Bayesian Network","title":"fbnet","text":"BuildBN function perform computations building Bayesian network. Query person defined, case son (ID 3). allele individual represent node network, edges represent conditional dependency. Using igraph package, network plotted. observed four alleles individual 3 conditioned maternal alleles, paternal alleles linkage variable (s). visualizing network igraph package installed loaded.","code":"install.packages(\"igraph\") library(igraph) bnet <- buildBN(pbn,QP=3) plot(bnet[[\"DAG\"]], layout=layout_with_fr, vertex.size=15,      vertex.label.dist=2.5, vertex.label.color = \"black\", vertex.label.size = 24, vertex.color=\"black\", edge.arrow.size=0.5)"},{"path":"/articles/fbnet.html","id":"computing-genotype-conditional-probability-tables","dir":"Articles","previous_headings":"","what":"Computing genotype conditional probability tables","title":"fbnet","text":"Bayesian network allows computing allele conditional probability tables (CPTs). process computationally expensive. building CPTs, variable elimination approach used, process successively remove variables Bayesian network maintaining ability answer queries interest.","code":"bn1 <- buildCPTs(bnet) resQ <- velim.bn(bn1,ordMethod=\"min_fill\",verbose=FALSE)"},{"path":"/articles/fbnet.html","id":"analyzing-conditioned-probabilities","dir":"Articles","previous_headings":"","what":"Analyzing conditioned probabilities","title":"fbnet","text":"computed, resQ contains conditioned genotype probabilities individual 3, based available evidence pedigree. output allows us compare conditioned probabilities reference population data. Firstly, data formatting done. packages must loaded data analyses plots. , resQ output analyzed follows: Probabilities normalized sum 1. Maternal allele probability Marker 1 strongly conditioned differs population. contrast, paternally conditioned allele different population due lack genetic evidence.  marker 2, process. results plotted follows:","code":"library(tidyverse) library(patchwork) library(ggplot2) library(viridis) library(hrbrthemes) Mprob1 <- resQ[[\"3_M1_m\"]] Fprob1 <- resQ[[\"3_M1_p\"]] names(Mprob1) <- c(\"V1\", \"V2\") names(Fprob1) <- c(\"V1\", \"V2\") Fprob1 <- mutate(Fprob1, V2 = V2*(1/sum(Fprob1$V2))) Fprob1 <- mutate(Fprob1, V3 = \"Paternal allele\") Mprob1 <- mutate(Mprob1, V2 = V2*(1/sum(Mprob1$V2))) Mprob1 <- mutate(Mprob1, V3 = \"Maternal allele\") Pop <- as.data.frame(cbind(names(pbn[[\"alelFreq\"]]$M1), pbn[[\"alelFreq\"]]$M1)) Pop <- mutate(Pop, V3 = \"Population\")  Mprob1<-rbind(Mprob1,Pop) Fprob1<-rbind(Fprob1,Pop) p1 <- ggplot(Mprob1,         aes(x = V1, y = as.numeric(V2), fill= V3)) +        geom_bar(position='dodge', stat = \"identity\", width=0.5) +         theme_classic() + xlab(\"Allele\") + ylab(\"Probability\") p2 <- ggplot(Fprob1,         aes(x = V1, y = as.numeric(V2), fill= V3)) +        geom_bar(position='dodge', stat = \"identity\", width=0.5) +         theme_classic() + xlab(\"Allele\") + ylab(\"Probability\") p1 + p2 Mprob2 <- resQ[[\"3_M2_m\"]] Fprob2 <- resQ[[\"3_M2_p\"]] names(Mprob2) <- c(\"V1\", \"V2\") names(Fprob2) <- c(\"V1\", \"V2\")  Fprob2 <- mutate(Fprob2, V2 = V2*(1/sum(Fprob2$V2))) Fprob2 <- mutate(Fprob2, V3 = \"Paternal allele\") Mprob2 <- mutate(Mprob2, V2 = V2*(1/sum(Mprob2$V2))) Mprob2 <- mutate(Mprob2, V3 = \"Maternal allele\") Pop2 <- as.data.frame(cbind(names(pbn[[\"alelFreq\"]]$M2), pbn[[\"alelFreq\"]]$M2)) Pop2 <- mutate(Pop2, V3 = \"Population\")  Mprob2<-rbind(Mprob2,Pop2) Fprob2<-rbind(Fprob2,Pop2) p1 <- ggplot(Mprob2,         aes(x = V1, y = as.numeric(V2), fill= V3)) +        geom_bar(position='dodge', stat = \"identity\", width=0.5) +         theme_classic() + xlab(\"Allele Marker 1\") + ylab(\"Probability\") p2 <- ggplot(Fprob2,         aes(x = V1, y = as.numeric(V2), fill= V3)) +        geom_bar(position='dodge', stat = \"identity\", width=0.5) +         theme_classic() + xlab(\"Allele Marker 2\") + ylab(\"Probability\") p1 + p2"},{"path":"/articles/fbnet.html","id":"analyzing-several-markers","dir":"Articles","previous_headings":"","what":"Analyzing several markers","title":"fbnet","text":"Moreover, can analyze plot genotype probability matrix considering markers. firstly calculate genotype probabilities marker 1. computations done marker 2 markers genotype probabilities computed follows. following plots shows probability genotype conditioned pedigree evidence reference population.","code":"M1Genopop<- as.data.frame(as.table(outer(as.numeric(Pop$V2), as.numeric(Pop$V2)))) M1Genopop<- mutate(M1Genopop,Geno = str_c(M1Genopop$Var1,\"/\",M1Genopop$Var2)) M2Genopop<-as.data.frame(as.table(outer(as.numeric(Pop2$V2), as.numeric(Pop2$V2))))  M2Genopop<- mutate(M2Genopop,Geno = str_c(M2Genopop$Var1,\"/\",M2Genopop$Var2))  M1_vec <- M1Genopop$Freq names(M1_vec) <- M1Genopop$Geno M2_vec <- M2Genopop$Freq names(M2_vec) <- M2Genopop$Geno GenoPop <- as.data.frame(as.table(outer(M1_vec,M2_vec)))  A <- filter(Mprob1, V3 == \"Maternal allele\") B <- filter(Fprob1, V3 == \"Paternal allele\") C <- filter(Mprob2, V3 == \"Maternal allele\") D <- filter(Fprob2, V3 == \"Paternal allele\")  M1GenoPed<- as.data.frame(as.table(outer(as.numeric(A$V2), as.numeric(B$V2)))) M1GenoPed<- mutate(M1GenoPed,Geno = str_c(\"D\",\"/\",M1GenoPed$Var2)) M2GenoPed<-as.data.frame(as.table(outer(as.numeric(C$V2), as.numeric(D$V2))))  M2GenoPed<- mutate(M2GenoPed,Geno = str_c(M2GenoPed$Var1,\"/\",M2GenoPed$Var2)) M1_vec_ped <- M1GenoPed$Freq names(M1_vec_ped) <- M1GenoPed$Geno  M2_vec_ped <- M2GenoPed$Freq names(M2_vec_ped) <- M2GenoPed$Geno GenoPed <- as.data.frame(as.table(outer(M1_vec_ped,M2_vec_ped))) p3 <- ggplot(GenoPop, aes(x = Var2, y = Var1)) +    geom_raster(aes(fill=Freq)) +    scale_fill_gradient(low=\"grey90\", high=\"blue\") +   labs(x=\"Marker 2\", y=\"Marker 1\", title=\"Population\") +   theme_bw() + theme(axis.text.x=element_text(size=5, angle=0, vjust=0.3),                      axis.text.y=element_text(size=5),                      plot.title=element_text(size=10)) p4 <- ggplot(GenoPed, aes(x = Var2, y = Var1)) +    geom_raster(aes(fill=Freq)) +    scale_fill_gradient(low=\"grey90\", high=\"blue\") +   labs(x=\"Marker 2\", y=\"Marker 1\", title=\"Conditioned\") +   theme_bw() + theme(axis.text.x=element_text(size=8, angle=0, vjust=0.3),                      axis.text.y=element_text(size=8),                      plot.title=element_text(size=10))  p3 + p4"},{"path":"/articles/vignettes/Caseexample.html","id":"installation","dir":"Articles > Vignettes","previous_headings":"","what":"Installation","title":"Network visualization","text":"first, fbnet library loaded. can install fbnet useful packages following lines:","code":"install.packages(\"fbnet\")  install.packages(\"pedtools\")  install.packages(\"mispitools\")  install.packages(\"forrel\")  library(fbnet) library(pedtools) library(mispitools) library(forrel)"},{"path":"/articles/vignettes/Caseexample.html","id":"setting-up-the-pedigree","dir":"Articles > Vignettes","previous_headings":"","what":"Setting up the pedigree","title":"Network visualization","text":"example, use pedtools library pedigree definition. Also, forrel R library provides framework genotype simulations, mispitools library allows working different reference allele frequencies databases.  , pedigree genetic information paternal grand uncle.","code":"Freqs <- lapply(getfreqs(Argentina), function(x) {x[x!=0]}) ped = linearPed(3) ped = addChildren(ped, father =  1, mother =  2) ped = pedtools::setMarkers(ped, locusAttributes = Freqs[1:3]) plot(ped, hatched = 8) ped = profileSim(ped, N = 1, ids = 8, numCores = 10)[[1]] #> Preparing parallelisation using 10 cores"},{"path":"/articles/vignettes/Caseexample.html","id":"from-pedtools-to-fbnet-ped-format","dir":"Articles > Vignettes","previous_headings":"","what":"From pedtools to fbnet ped format","title":"Network visualization","text":"ConvertPedFormat function, fbnet, allows working pedtools pedigree format.","code":"ped_fbnet <- convertPedformat(ped)"},{"path":"/articles/vignettes/Caseexample.html","id":"analyzing-the-pedigree","dir":"Articles > Vignettes","previous_headings":"","what":"Analyzing the pedigree","title":"Network visualization","text":"Now can put thing work fbnet.","code":"pbn  <- initBN(ped_fbnet) bnet <- buildBN(pbn,QP=7) bn1  <- buildCPTs(bnet)  resQ <- velim.bn(bn1,ordMethod=\"min_fill\",verbose=FALSE)"},{"path":"/articles/vignettes/Caseexample.html","id":"network-visualization-with-igraph","dir":"Articles > Vignettes","previous_headings":"","what":"Network visualization with igraph","title":"Network visualization","text":"visualizing network igraph package installed loaded.  previously explained, nodes represent alleles edges conditional relationships. node name represents: ID_marker_allele. Id individual number, marker name genetic marker, allele paternal (p) maternal (m). Due complexity network, iterative visualization better option.","code":"install.packages(\"igraph\") library(igraph) plot(bnet[[\"DAG\"]], layout=layout_with_fr, vertex.size=4,      vertex.label.dist=0.7, vertex.label.color = \"black\", vertex.label.size = 20, vertex.color=\"black\", edge.arrow.size=0.5)"},{"path":"/articles/vignettes/Caseexample.html","id":"network-visualization-with-networkd3","dir":"Articles > Vignettes","previous_headings":"","what":"Network visualization with networkD3","title":"Network visualization","text":"First, iterative network visualization networkD3 must installed follows: Iterative network visualized follows:","code":"install.packages(\"networkD3\") library(networkD3) simpleNetwork(as_long_data_frame(bnet[[\"DAG\"]]), Source = 5, Target = 17, nodeColour = \"black\")"},{"path":"/articles/vignettes/fbnet.html","id":"installation","dir":"Articles > Vignettes","previous_headings":"","what":"Installation","title":"fbnet","text":"first, fbnet library loaded. can install fbnet pasting following lines:","code":"install.packages(\"fbnet\")  library(fbnet)"},{"path":"/articles/vignettes/fbnet.html","id":"setting-up-the-pedigree","dir":"Articles > Vignettes","previous_headings":"","what":"Setting up the pedigree","title":"fbnet","text":"“Toyped” pedigree example provided fbnet package. Also, fbnet work pedigree object produced pedtools R package. observed, “Toyped” pedigree three members (Ids 1, 2 3). FID father ID, MID mother ID. Therefore, 1 2 founders ID 3 parents 1 2. first step fbnet pedigree processing initialize Bayesian Network initBN function. generated, pbn object stores parameters, reference population allele frequencies. example two markers analyzed, M1 M2, four alleles one. mother (ID 2) genotyped, M1_p, mothers paternal allele M1_m mothers maternal allele.","code":"toyped[[\"pedigree\"]] #>      ID FID MID SEX AFF #> [1,]  1   0   0   1   1 #> [2,]  2   0   0   2   1 #> [3,]  3   1   2   1   1 pbn  <- initBN(toyped) pbn[[\"alelFreq\"]] #> $M1 #>   A   B   C   D  #> 0.1 0.2 0.3 0.4  #>  #> $M2 #>    A    B    C    D  #> 0.25 0.25 0.25 0.25 pbn[[\"markerEvidence\"]] #>   M1_p M1_m M2_p M2_m #> 2 \"D\"  \"D\"  \"B\"  \"C\""},{"path":"/articles/vignettes/fbnet.html","id":"building-the-bayesian-network","dir":"Articles > Vignettes","previous_headings":"","what":"Building the Bayesian Network","title":"fbnet","text":"BuildBN function perform computations building Bayesian network. Query person defined, case son (ID 3). allele individual represent node network, edges represent conditional dependency. Using igraph package, network plotted. observed four alleles individual 3 conditioned maternal alleles, paternal alleles linkage variable (s). visualizing network igraph package installed loaded.","code":"install.packages(\"igraph\") library(igraph) bnet <- buildBN(pbn,QP=3) plot(bnet[[\"DAG\"]], layout=layout_with_fr, vertex.size=15,      vertex.label.dist=2.5, vertex.label.color = \"black\", vertex.label.size = 24, vertex.color=\"black\", edge.arrow.size=0.5)"},{"path":"/articles/vignettes/fbnet.html","id":"computing-genotype-conditional-probability-tables","dir":"Articles > Vignettes","previous_headings":"","what":"Computing genotype conditional probability tables","title":"fbnet","text":"Bayesian network allows computing allele conditional probability tables (CPTs). process computationally expensive. building CPTs, variable elimination approach used, process successively remove variables Bayesian network maintaining ability answer queries interest.","code":"bn1 <- buildCPTs(bnet) resQ <- velim.bn(bn1,ordMethod=\"min_fill\",verbose=FALSE)"},{"path":"/articles/vignettes/fbnet.html","id":"analyzing-conditioned-probabilities","dir":"Articles > Vignettes","previous_headings":"","what":"Analyzing conditioned probabilities","title":"fbnet","text":"computed, resQ contains conditioned genotype probabilities individual 3, based available evidence pedigree. output allows us compare conditioned probabilities reference population data. Firstly, data formatting done. packages must loaded data analyses plots. , resQ output analyzed follows: Probabilities normalized sum 1. Maternal allele probability Marker 1 strongly conditioned differs population. contrast, paternally conditioned allele different population due lack genetic evidence.  marker 2, process. results plotted follows:","code":"library(tidyverse) library(patchwork) library(ggplot2) library(viridis) library(hrbrthemes) Mprob1 <- resQ[[\"3_M1_m\"]] Fprob1 <- resQ[[\"3_M1_p\"]] names(Mprob1) <- c(\"V1\", \"V2\") names(Fprob1) <- c(\"V1\", \"V2\") Fprob1 <- mutate(Fprob1, V2 = V2*(1/sum(Fprob1$V2))) Fprob1 <- mutate(Fprob1, V3 = \"Paternal allele\") Mprob1 <- mutate(Mprob1, V2 = V2*(1/sum(Mprob1$V2))) Mprob1 <- mutate(Mprob1, V3 = \"Maternal allele\") Pop <- as.data.frame(cbind(names(pbn[[\"alelFreq\"]]$M1), pbn[[\"alelFreq\"]]$M1)) Pop <- mutate(Pop, V3 = \"Population\")  Mprob1<-rbind(Mprob1,Pop) Fprob1<-rbind(Fprob1,Pop) p1 <- ggplot(Mprob1,         aes(x = V1, y = as.numeric(V2), fill= V3)) +        geom_bar(position='dodge', stat = \"identity\", width=0.5) +         theme_classic() + xlab(\"Allele\") + ylab(\"Probability\") p2 <- ggplot(Fprob1,         aes(x = V1, y = as.numeric(V2), fill= V3)) +        geom_bar(position='dodge', stat = \"identity\", width=0.5) +         theme_classic() + xlab(\"Allele\") + ylab(\"Probability\") p1 + p2 Mprob2 <- resQ[[\"3_M2_m\"]] Fprob2 <- resQ[[\"3_M2_p\"]] names(Mprob2) <- c(\"V1\", \"V2\") names(Fprob2) <- c(\"V1\", \"V2\")  Fprob2 <- mutate(Fprob2, V2 = V2*(1/sum(Fprob2$V2))) Fprob2 <- mutate(Fprob2, V3 = \"Paternal allele\") Mprob2 <- mutate(Mprob2, V2 = V2*(1/sum(Mprob2$V2))) Mprob2 <- mutate(Mprob2, V3 = \"Maternal allele\") Pop2 <- as.data.frame(cbind(names(pbn[[\"alelFreq\"]]$M2), pbn[[\"alelFreq\"]]$M2)) Pop2 <- mutate(Pop2, V3 = \"Population\")  Mprob2<-rbind(Mprob2,Pop2) Fprob2<-rbind(Fprob2,Pop2) p1 <- ggplot(Mprob2,         aes(x = V1, y = as.numeric(V2), fill= V3)) +        geom_bar(position='dodge', stat = \"identity\", width=0.5) +         theme_classic() + xlab(\"Allele Marker 1\") + ylab(\"Probability\") p2 <- ggplot(Fprob2,         aes(x = V1, y = as.numeric(V2), fill= V3)) +        geom_bar(position='dodge', stat = \"identity\", width=0.5) +         theme_classic() + xlab(\"Allele Marker 2\") + ylab(\"Probability\") p1 + p2"},{"path":"/articles/vignettes/fbnet.html","id":"analyzing-several-markers","dir":"Articles > Vignettes","previous_headings":"","what":"Analyzing several markers","title":"fbnet","text":"Moreover, can analyze plot genotype probability matrix considering markers. firstly calculate genotype probabilities marker 1. computations done marker 2 markers genotype probabilities computed follows. following plots shows probability genotype conditioned pedigree evidence reference population.","code":"M1Genopop<- as.data.frame(as.table(outer(as.numeric(Pop$V2), as.numeric(Pop$V2)))) M1Genopop<- mutate(M1Genopop,Geno = str_c(M1Genopop$Var1,\"/\",M1Genopop$Var2)) M2Genopop<-as.data.frame(as.table(outer(as.numeric(Pop2$V2), as.numeric(Pop2$V2))))  M2Genopop<- mutate(M2Genopop,Geno = str_c(M2Genopop$Var1,\"/\",M2Genopop$Var2))  M1_vec <- M1Genopop$Freq names(M1_vec) <- M1Genopop$Geno M2_vec <- M2Genopop$Freq names(M2_vec) <- M2Genopop$Geno GenoPop <- as.data.frame(as.table(outer(M1_vec,M2_vec)))  A <- filter(Mprob1, V3 == \"Maternal allele\") B <- filter(Fprob1, V3 == \"Paternal allele\") C <- filter(Mprob2, V3 == \"Maternal allele\") D <- filter(Fprob2, V3 == \"Paternal allele\")  M1GenoPed<- as.data.frame(as.table(outer(as.numeric(A$V2), as.numeric(B$V2)))) M1GenoPed<- mutate(M1GenoPed,Geno = str_c(\"D\",\"/\",M1GenoPed$Var2)) M2GenoPed<-as.data.frame(as.table(outer(as.numeric(C$V2), as.numeric(D$V2))))  M2GenoPed<- mutate(M2GenoPed,Geno = str_c(M2GenoPed$Var1,\"/\",M2GenoPed$Var2)) M1_vec_ped <- M1GenoPed$Freq names(M1_vec_ped) <- M1GenoPed$Geno  M2_vec_ped <- M2GenoPed$Freq names(M2_vec_ped) <- M2GenoPed$Geno GenoPed <- as.data.frame(as.table(outer(M1_vec_ped,M2_vec_ped))) p3 <- ggplot(GenoPop, aes(x = Var2, y = Var1)) +    geom_raster(aes(fill=Freq)) +    scale_fill_gradient(low=\"grey90\", high=\"blue\") +   labs(x=\"Marker 2\", y=\"Marker 1\", title=\"Population\") +   theme_bw() + theme(axis.text.x=element_text(size=5, angle=0, vjust=0.3),                      axis.text.y=element_text(size=5),                      plot.title=element_text(size=10)) p4 <- ggplot(GenoPed, aes(x = Var2, y = Var1)) +    geom_raster(aes(fill=Freq)) +    scale_fill_gradient(low=\"grey90\", high=\"blue\") +   labs(x=\"Marker 2\", y=\"Marker 1\", title=\"Conditioned\") +   theme_bw() + theme(axis.text.x=element_text(size=8, angle=0, vjust=0.3),                      axis.text.y=element_text(size=8),                      plot.title=element_text(size=10))  p3 + p4"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Franco Marsico. Author, maintainer. Ariel Chernomoretz. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chernomoretz, Ariel, Marsico, Franco, Iserte, Javier, Pinero, Herrera M, Escobar, Soledad M, Balparda, Manuel, Sibilla, Gustavo (2022). “Bayesian networks DNA-based kinship analysis: Functionality validation GENis missing person identification module.” Forensic Science International: Genetics Supplement Series. https://doi.org/10.1016/j.fsigss.2022.10.008.","code":"@Article{,   title = {Bayesian networks for DNA-based kinship analysis: Functionality and validation of the GENis missing person identification module},   author = {{Chernomoretz} and {Ariel} and {Marsico} and {Franco} and {Iserte} and {Javier} and {Pinero} and Mariana Herrera and {Escobar} and Maria Soledad and {Balparda} and {Manuel} and {Sibilla} and {Gustavo}},   journal = {Forensic Science International: Genetics Supplement Series},   year = {2022},   url = {https://doi.org/10.1016/j.fsigss.2022.10.008}, }"},{"path":"/index.html","id":"fbnet","dir":"","previous_headings":"","what":"Forensic Bayesian Networks","title":"Forensic Bayesian Networks","text":"fbnet open source software package written R statistical languaje. implements complete GENis functionality, recently published open-source multi-tier information system developed run forensic DNA databases perform kinship analysis based DNA profiles. GENis freely available github: https://github.com/fundacion-sadosky/genis relies Bayesian Networks framework particularly well suited efficiently perform large-size queries databases missing individuals. interact main functionallities packages pedigree analysis. particular, fbnet can interpret pedigree formats ‘Familias’ software (1). addition ‘pedtools’, software creating manipulating pedigrees markers, supported (2). fbnet allows computing LRs obtaining genotype probability distributions query individual, based pedigree data. fbnet GENis projects supported Fundación Sadosky https://www.fundacionsadosky.org.ar/ Ministerio de Ciencia, Tecnología e Innovación Argentina https://www.argentina.gob.ar/ciencia 1- Vigeland, M. D. (2021). Pedigree analysis R. Academic Press.  2- Egeland, T., Kling, D., & Mostad, P. (2015). Relationship inference familias R: statistical methods forensic genetics. Academic Press.","code":""},{"path":"/reference/Argentina_STRs.html","id":null,"dir":"Reference","previous_headings":"","what":"STRs allelic frequencies from Argentina. — Argentina_STRs","title":"STRs allelic frequencies from Argentina. — Argentina_STRs","text":"STRs allelic frequencies Argentina.","code":""},{"path":"/reference/Argentina_STRs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"STRs allelic frequencies from Argentina. — Argentina_STRs","text":"","code":"Argentina_STRs"},{"path":"/reference/Argentina_STRs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"STRs allelic frequencies from Argentina. — Argentina_STRs","text":"data frame allele frequencies","code":""},{"path":"/reference/Familias2linkdat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert 'Familias' output to linkdat objects — Familias2linkdat","title":"Convert 'Familias' output to linkdat objects — Familias2linkdat","text":"function extracted paramlik package, currently maintained. Familias widely used program computations forensic genetics. function documented facilitates use paramlink specialized computations implemented Familias, e.g. conditional simulations.","code":""},{"path":"/reference/Familias2linkdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert 'Familias' output to linkdat objects — Familias2linkdat","text":"","code":"Familias2linkdat(familiasped, datamatrix, loci)  readFamiliasLoci(loci)  connectedComponentsfb(ID, FID, MID)"},{"path":"/reference/Familias2linkdat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert 'Familias' output to linkdat objects — Familias2linkdat","text":"familiasped FamiliasPedigree object list . datamatrix data frame two columns per marker (one allele) one row per individual. loci FamiliasLocus object list . ID integer vector: Individual ID. FID integer vector: ID father. MID integer vector: ID mother.","code":""},{"path":"/reference/Familias2linkdat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert 'Familias' output to linkdat objects — Familias2linkdat","text":"linkdat object, list .","code":""},{"path":"/reference/Familias2linkdat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert 'Familias' output to linkdat objects — Familias2linkdat","text":"Familias program represents pedigrees marker data way differs paramlink several ways, mostly paramlink's stricter definition 'pedigree'. paramlink, pedigree must connected, numerical IDs, member must either 0 2 parentsfb present pedigree. None required FamiliasPedigree objects. conversion function Familias2linkdat takes care potential differences: converts FamiliasPedigree list connected linkdat objects, additional parentsfb added needed, non-numerical ID labels stored plot.labels slot linkdat object(s).","code":""},{"path":"/reference/Familias2linkdat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert 'Familias' output to linkdat objects — Familias2linkdat","text":"Windows Familias freely available https://familias.name.","code":""},{"path":"/reference/Familias2linkdat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert 'Familias' output to linkdat objects — Familias2linkdat","text":"Magnus Dehli Vigeland, Thore Egeland","code":""},{"path":"/reference/FamiliasLocus.html","id":null,"dir":"Reference","previous_headings":"","what":"FamiliasLocus: a function for reading Familias locus data. — FamiliasLocus","title":"FamiliasLocus: a function for reading Familias locus data. — FamiliasLocus","text":"FamiliasLocus: function reading Familias locus data.","code":""},{"path":"/reference/FamiliasLocus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FamiliasLocus: a function for reading Familias locus data. — FamiliasLocus","text":"","code":"FamiliasLocus(   frequencies,   allelenames,   name,   MutationModel = \"Stepwise\",   MutationRate = 0,   MutationRange = 0.5,   MutationRate2 = 0,   MutationMatrix,   Stabilization = \"None\",   MaxStabilizedMutrate = 1,   femaleMutationModel,   femaleMutationRate,   femaleMutationRange,   femaleMutationRate2,   femaleMutationMatrix,   maleMutationModel,   maleMutationRate,   maleMutationRange,   maleMutationRate2,   maleMutationMatrix )"},{"path":"/reference/FamiliasLocus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FamiliasLocus: a function for reading Familias locus data. — FamiliasLocus","text":"frequencies allele frequencies allelenames names name system name MutationModel model MutationRate rates MutationRange range MutationRate2 rate two, applied extended stepwise MutationMatrix matrix Stabilization stabilization factor MaxStabilizedMutrate mix factor femaleMutationModel females femaleMutationRate rate femaleMutationRange range femaleMutationRate2 rate 2 femaleMutationMatrix females matrix maleMutationModel male matrix maleMutationRate male rate maleMutationRange male range maleMutationRate2 rate 2 maleMutationMatrix matrix","code":""},{"path":"/reference/FamiliasLocus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FamiliasLocus: a function for reading Familias locus data. — FamiliasLocus","text":"Locus analysis.","code":""},{"path":"/reference/FamiliasLocus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FamiliasLocus: a function for reading Familias locus data. — FamiliasLocus","text":"","code":"frequencies <- c(0.1, 0.2, 0.3, 0.4) allelenames <- c(\"A\", \"B\", \"C\", \"D\") marker <- FamiliasLocus(frequencies, allelenames)"},{"path":"/reference/FamiliasPedigree.html","id":null,"dir":"Reference","previous_headings":"","what":"FamiliasPedigree: a function for constructing Familias pedigree format. — FamiliasPedigree","title":"FamiliasPedigree: a function for constructing Familias pedigree format. — FamiliasPedigree","text":"FamiliasPedigree: function constructing Familias pedigree format.","code":""},{"path":"/reference/FamiliasPedigree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FamiliasPedigree: a function for constructing Familias pedigree format. — FamiliasPedigree","text":"","code":"FamiliasPedigree(id, dadid, momid, sex)"},{"path":"/reference/FamiliasPedigree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FamiliasPedigree: a function for constructing Familias pedigree format. — FamiliasPedigree","text":"id individual id dadid father id momid mother id sex biological sex","code":""},{"path":"/reference/FamiliasPedigree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FamiliasPedigree: a function for constructing Familias pedigree format. — FamiliasPedigree","text":"dataframe probabilities.","code":""},{"path":"/reference/FamiliasPedigree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FamiliasPedigree: a function for constructing Familias pedigree format. — FamiliasPedigree","text":"","code":"persons <- c(\"mother\", \"child\", \"AF\") sex <- c(\"female\", \"female\", \"male\") ped1 <- FamiliasPedigree(id = persons, dadid = c(NA, \"AF\", NA),momid = c(NA, \"mother\", NA), sex=sex)"},{"path":"/reference/allGenotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Genotype combinations — allGenotypes","title":"Genotype combinations — allGenotypes","text":"Auxiliary functions computing possible genotype combinations pedigree. normally intended end users.","code":""},{"path":"/reference/allGenotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genotype combinations — allGenotypes","text":"","code":"allGenotypes(n)  fast.grid(argslist, as.list = FALSE)  geno.grid.subset(x, partialmarker, ids, chrom, make.grid = T)"},{"path":"/reference/allGenotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genotype combinations — allGenotypes","text":"n positive integer. argslist list vectors. .list TRUE, output list, otherwise matrix. x linkdat object. partialmarker marker object compatible x. ids numeric ID labels one pedigree members. chrom character, either 'X' 'AUTOSOMAL'. missing, 'chrom' attribute partialmarker used. also missing, 'AUTOSOMAL' taken default value. make.grid logical. FALSE, list returned, otherwise fast.grid applied list returning .","code":""},{"path":"/reference/allGenotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Genotype combinations — allGenotypes","text":"allGenotypes returns matrix 2 columns n +   n*n(n-1)/2 rows containing possible (unordered) genotypes biallelic locus alleles 1,2,...{},n. fast.grid basically stripped version expand.grid.","code":""},{"path":"/reference/allGenotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genotype combinations — allGenotypes","text":"","code":"m = allGenotypes(2) stopifnot(m == rbind(c(1,1), c(2,2), 1:2))"},{"path":"/reference/as.matrix.linkdat.html","id":null,"dir":"Reference","previous_headings":"","what":"linkdat to matrix conversion — as.matrix.linkdat","title":"linkdat to matrix conversion — as.matrix.linkdat","text":"Converts linkdat object matrix (basically following pre-makeped LINKAGE format), marker annotations info attached attributes.","code":""},{"path":"/reference/as.matrix.linkdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"linkdat to matrix conversion — as.matrix.linkdat","text":"","code":"# S3 method for linkdat as.matrix(x, include.attrs = TRUE, ...)  restore_linkdat(x, attrs = NULL, checkped = TRUE)"},{"path":"/reference/as.matrix.linkdat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"linkdat to matrix conversion — as.matrix.linkdat","text":"x linkdat object. restore_linkdat: numerical matrix LINKAGE format. include.attrs logical indicating marker annotations info attached attributes. See value. ... used. attrs list containing marker annotations linkdat info compatible x, format produced .matrix. NULL, attributes x used. checkped logical, forwarded linkdat. FALSE, checks pedigree errors performed.","code":""},{"path":"/reference/as.matrix.linkdat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"linkdat to matrix conversion — as.matrix.linkdat","text":".matrix: matrix x$nInd rows 6 +   2*x$nMark columns.  6 first columns describe pedigree LINKAGE format, remaining columns contain marker alleles, using internal (numerical) allele coding 0 missing alleles. include.attrs = TRUE matrix following attributes: markerattr (list marker annotations) available (availability vector) model (disease model, present) plot.labels (plot labels, present) orig.ids (original individual IDs) restore_linkdat: linkdat object.","code":""},{"path":"/reference/as.matrix.linkdat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"linkdat to matrix conversion — as.matrix.linkdat","text":"restore_linkdat reverse .matrix. way linkdat objects created paramlink, marker data stored list marker objects. essentially matrix various attributes like allele frequencies, map info .s.o.. format works well marker--marker operations (e.g. likelihoods LOD scores), makes somewhat awkward operate 'horizontally', .e. individual--individual, instance one wants delete genotypes certain individual, rearrange pedigree way. therefore recommended convert linkdat object matrix first, necessary manipulations matrix, finally use restore_linkdat. Attributes often deleted matrix manipulation, may necessary store variable feed manually restore_linkdat using attrs argument. default parameters, restore_linkdat(.matrix(x)) reproduce x exactly.","code":""},{"path":[]},{"path":"/reference/bnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialized bayesian network. — bnet","title":"Initialized bayesian network. — bnet","text":"Initialized bayesian network.","code":""},{"path":"/reference/bnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialized bayesian network. — bnet","text":"","code":"bnet"},{"path":"/reference/bnet.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Initialized bayesian network. — bnet","text":"Initialized bayesian network, based toyped.","code":""},{"path":"/reference/buildBN.html","id":null,"dir":"Reference","previous_headings":"","what":"buildBN: a function for building the bayesian network. — buildBN","title":"buildBN: a function for building the bayesian network. — buildBN","text":"buildBN: function building bayesian network.","code":""},{"path":"/reference/buildBN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"buildBN: a function for building the bayesian network. — buildBN","text":"","code":"buildBN(pbn, QP)"},{"path":"/reference/buildBN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"buildBN: a function for building the bayesian network. — buildBN","text":"pbn bayesian network pedigree object information genotyped members. ped object must Familias format. QP Query Persons Ids","code":""},{"path":"/reference/buildBN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"buildBN: a function for building the bayesian network. — buildBN","text":"bayesian network based pedigree evidence QP definition.","code":""},{"path":"/reference/buildBN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"buildBN: a function for building the bayesian network. — buildBN","text":"","code":"bnet <- buildBN(pbn,QP=3) #> Error in buildBN(pbn, QP = 3): object 'pbn' not found"},{"path":"/reference/buildCPTs.html","id":null,"dir":"Reference","previous_headings":"","what":"buildCPTs: a function for building conditional probability tables based on pedigree bayesian network. — buildCPTs","title":"buildCPTs: a function for building conditional probability tables based on pedigree bayesian network. — buildCPTs","text":"buildCPTs: function building conditional probability tables based pedigree bayesian network.","code":""},{"path":"/reference/buildCPTs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"buildCPTs: a function for building conditional probability tables based on pedigree bayesian network. — buildCPTs","text":"","code":"buildCPTs(   bn,   bNodePrunning = TRUE,   bStateRemoval = TRUE,   bStateRemoval2 = TRUE,   lumpingParameter = NULL,   renorm = \"row-wise\",   verbose = FALSE )"},{"path":"/reference/buildCPTs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"buildCPTs: a function for building conditional probability tables based on pedigree bayesian network. — buildCPTs","text":"bn bayesian network pedigree object information genotyped members. ped object must Familias format. bNodePrunning Standard pruning. bStateRemoval State based pruning. bStateRemoval2 State based pruning (model 2). lumpingParameter Used stepwise mutational model. renorm \"row-wise\" selected, zero probability assigned transitions range. verbose Computations output.","code":""},{"path":"/reference/buildCPTs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"buildCPTs: a function for building conditional probability tables based on pedigree bayesian network. — buildCPTs","text":"bayesian network based pedigree evidence QP definition.","code":""},{"path":"/reference/buildCPTs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"buildCPTs: a function for building conditional probability tables based on pedigree bayesian network. — buildCPTs","text":"","code":"bnet <- buildBN(pbn,QP=3) #> Error in buildBN(pbn, QP = 3): object 'pbn' not found bn1  <- buildCPTs(bnet) #> Error in buildCPTs(bnet): object 'bnet' not found"},{"path":"/reference/convertPedformat.html","id":null,"dir":"Reference","previous_headings":"","what":"convertPedformat: a function for converting a pedtools ped onject to a famlink ped object. — convertPedformat","title":"convertPedformat: a function for converting a pedtools ped onject to a famlink ped object. — convertPedformat","text":"convertPedformat: function converting pedtools ped onject famlink ped object.","code":""},{"path":"/reference/convertPedformat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convertPedformat: a function for converting a pedtools ped onject to a famlink ped object. — convertPedformat","text":"","code":"convertPedformat(x, verbose = FALSE)"},{"path":"/reference/convertPedformat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convertPedformat: a function for converting a pedtools ped onject to a famlink ped object. — convertPedformat","text":"x pedtools ped object. verbose Function output.","code":""},{"path":"/reference/convertPedformat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convertPedformat: a function for converting a pedtools ped onject to a famlink ped object. — convertPedformat","text":"dataframe LRs.","code":""},{"path":"/reference/evidencePrunning.html","id":null,"dir":"Reference","previous_headings":"","what":"evidencePrunning: a fuction for pruning instantiated variables. — evidencePrunning","title":"evidencePrunning: a fuction for pruning instantiated variables. — evidencePrunning","text":"evidencePrunning: fuction pruning instantiated variables.","code":""},{"path":"/reference/evidencePrunning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"evidencePrunning: a fuction for pruning instantiated variables. — evidencePrunning","text":"","code":"evidencePrunning(bn)"},{"path":"/reference/evidencePrunning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"evidencePrunning: a fuction for pruning instantiated variables. — evidencePrunning","text":"bn bayesian network (output buildBN function).","code":""},{"path":"/reference/evidencePrunning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"evidencePrunning: a fuction for pruning instantiated variables. — evidencePrunning","text":"preprocessed bayesian network.","code":""},{"path":"/reference/factorHeteroFounders.html","id":null,"dir":"Reference","previous_headings":"","what":"factorHeteroFounders: a function for multiplying probabilities in case of heterocigote founders. — factorHeteroFounders","title":"factorHeteroFounders: a function for multiplying probabilities in case of heterocigote founders. — factorHeteroFounders","text":"factorHeteroFounders: function multiplying probabilities case heterocigote founders.","code":""},{"path":"/reference/factorHeteroFounders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"factorHeteroFounders: a function for multiplying probabilities in case of heterocigote founders. — factorHeteroFounders","text":"","code":"factorHeteroFounders(rresQ, bn)"},{"path":"/reference/factorHeteroFounders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"factorHeteroFounders: a function for multiplying probabilities in case of heterocigote founders. — factorHeteroFounders","text":"rresQ List CPTs. bn bayesian network pedigree object information genotyped members. ped object must Familias format.","code":""},{"path":"/reference/factorHeteroFounders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"factorHeteroFounders: a function for multiplying probabilities in case of heterocigote founders. — factorHeteroFounders","text":"dataframe genotype probabilities.","code":""},{"path":"/reference/fbnet.html","id":null,"dir":"Reference","previous_headings":"","what":"fbnet: Forensic Bayesian Networks — fbnet","title":"fbnet: Forensic Bayesian Networks — fbnet","text":"'fbnet' open source software package written R statistical languaje. relies Bayesian Networks framework doi: 10.1017/CBO9780511811357 . particularly well suited efficiently perform large-size queries databases missing individuals. interact main functionallities packages pedigree analysis. particular, 'fbnet' imports 'Familias' software doi: 10.1016/S0379-0738(00)00147-X . addition 'pedtools', software creating manipulating pedigrees markers, supported. 'fbnet' allows computing LRs obtaining genotype probability distributions query individual, based pedigree data. 'fbnet' implements complete GENis functionality, recently published open-source multi-tier information system developed run forensic DNA databases perform kinship analysis based DNA profiles doi: 10.1016/j.fsir.2020.100132 .","code":""},{"path":"/reference/getConditional.html","id":null,"dir":"Reference","previous_headings":"","what":"getConditional: a function for obtaining the coditional probability tables based on a given evidence. — getConditional","title":"getConditional: a function for obtaining the coditional probability tables based on a given evidence. — getConditional","text":"getConditional: function obtaining coditional probability tables based given evidence.","code":""},{"path":"/reference/getConditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getConditional: a function for obtaining the coditional probability tables based on a given evidence. — getConditional","text":"","code":"getConditional(lf)"},{"path":"/reference/getConditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getConditional: a function for obtaining the coditional probability tables based on a given evidence. — getConditional","text":"lf list joint probabilities.","code":""},{"path":"/reference/getConditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getConditional: a function for obtaining the coditional probability tables based on a given evidence. — getConditional","text":"list conditioned probabilities.","code":""},{"path":"/reference/getGenotypeTables.html","id":null,"dir":"Reference","previous_headings":"","what":"getGenotypeTables: a function for obtaining genotypetables after variable elimination and using available genetic evidence. — getGenotypeTables","title":"getGenotypeTables: a function for obtaining genotypetables after variable elimination and using available genetic evidence. — getGenotypeTables","text":"getGenotypeTables: function obtaining genotypetables variable elimination using available genetic evidence.","code":""},{"path":"/reference/getGenotypeTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getGenotypeTables: a function for obtaining genotypetables after variable elimination and using available genetic evidence. — getGenotypeTables","text":"","code":"getGenotypeTables(bn, resQ, geno = NULL, lqp = NULL)"},{"path":"/reference/getGenotypeTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getGenotypeTables: a function for obtaining genotypetables after variable elimination and using available genetic evidence. — getGenotypeTables","text":"bn bayesian network pedigree object information genotyped members. ped object must Familias format. resQ List CPTs. geno data.frame genotypes. lqp list individuals genotypes.","code":""},{"path":"/reference/getGenotypeTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getGenotypeTables: a function for obtaining genotypetables after variable elimination and using available genetic evidence. — getGenotypeTables","text":"dataframe genotype probabilities.","code":""},{"path":"/reference/getLocusCPT.html","id":null,"dir":"Reference","previous_headings":"","what":"getLocusCPT: a function for obtaining the coditional probability table from a specific locus. — getLocusCPT","title":"getLocusCPT: a function for obtaining the coditional probability table from a specific locus. — getLocusCPT","text":"getLocusCPT: function obtaining coditional probability table specific locus.","code":""},{"path":"/reference/getLocusCPT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getLocusCPT: a function for obtaining the coditional probability table from a specific locus. — getLocusCPT","text":"","code":"getLocusCPT(bn, locus, lumpingParameter = NULL, renorm = \"row-wise\")"},{"path":"/reference/getLocusCPT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getLocusCPT: a function for obtaining the coditional probability table from a specific locus. — getLocusCPT","text":"bn bayesian network pedigree object information genotyped members. ped object must Familias format. locus Specified locus. lumpingParameter Used stepwise mutational model. renorm \"row-wise\" selected, zero probability assigned transitions range.","code":""},{"path":"/reference/getLocusCPT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getLocusCPT: a function for obtaining the coditional probability table from a specific locus. — getLocusCPT","text":"bayesian network based pedigree evidence QP definition.","code":""},{"path":"/reference/getLocusCPT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getLocusCPT: a function for obtaining the coditional probability table from a specific locus. — getLocusCPT","text":"","code":"bnet <- buildBN(pbn,QP=3) #> Error in buildBN(pbn, QP = 3): object 'pbn' not found bn1  <- buildCPTs(bnet) #> Error in buildCPTs(bnet): object 'bnet' not found locCPT <- getLocusCPT(bn1,\"M1\") #> Error in which(names(bn$alelFreq) == locus): object 'bn1' not found"},{"path":"/reference/getMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"factorHeteroFounders: a function for multiplying probabilities in case of heterocigote founders. — getMAP","title":"factorHeteroFounders: a function for multiplying probabilities in case of heterocigote founders. — getMAP","text":"factorHeteroFounders: function multiplying probabilities case heterocigote founders.","code":""},{"path":"/reference/getMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"factorHeteroFounders: a function for multiplying probabilities in case of heterocigote founders. — getMAP","text":"","code":"getMAP(resQ, topn = 3)"},{"path":"/reference/getMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"factorHeteroFounders: a function for multiplying probabilities in case of heterocigote founders. — getMAP","text":"resQ List CPTs. topn Format parameter.","code":""},{"path":"/reference/getMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"factorHeteroFounders: a function for multiplying probabilities in case of heterocigote founders. — getMAP","text":"MAP probability table.","code":""},{"path":"/reference/getQSetRMP.html","id":null,"dir":"Reference","previous_headings":"","what":"getGenotypeTables: a function for obtaining genotypetables after variable elimination and using available genetic evidence. — getQSetRMP","title":"getGenotypeTables: a function for obtaining genotypetables after variable elimination and using available genetic evidence. — getQSetRMP","text":"getGenotypeTables: function obtaining genotypetables variable elimination using available genetic evidence.","code":""},{"path":"/reference/getQSetRMP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getGenotypeTables: a function for obtaining genotypetables after variable elimination and using available genetic evidence. — getQSetRMP","text":"","code":"getQSetRMP(bn, lqp)"},{"path":"/reference/getQSetRMP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getGenotypeTables: a function for obtaining genotypetables after variable elimination and using available genetic evidence. — getQSetRMP","text":"bn bayesian network pedigree object information genotyped members. ped object must Familias format. lqp list individuals genotypes.","code":""},{"path":"/reference/getQSetRMP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getGenotypeTables: a function for obtaining genotypetables after variable elimination and using available genetic evidence. — getQSetRMP","text":"dataframe genotype probabilities.","code":""},{"path":"/reference/getValuesOut.html","id":null,"dir":"Reference","previous_headings":"","what":"getValuesOut: a function for getting out variables with zero probability in the bayesian network — getValuesOut","title":"getValuesOut: a function for getting out variables with zero probability in the bayesian network — getValuesOut","text":"getValuesOut: function getting variables zero probability bayesian network","code":""},{"path":"/reference/getValuesOut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getValuesOut: a function for getting out variables with zero probability in the bayesian network — getValuesOut","text":"","code":"getValuesOut(cpt, condVar = c())"},{"path":"/reference/getValuesOut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getValuesOut: a function for getting out variables with zero probability in the bayesian network — getValuesOut","text":"cpt conditional probability table bayesian network condVar variables conditioning table","code":""},{"path":"/reference/getValuesOut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getValuesOut: a function for getting out variables with zero probability in the bayesian network — getValuesOut","text":"processed conditional probability table","code":""},{"path":"/reference/imposeEvidence.html","id":null,"dir":"Reference","previous_headings":"","what":"imposeEvidence: a fuction for imposing evidence in the bayesian network. — imposeEvidence","title":"imposeEvidence: a fuction for imposing evidence in the bayesian network. — imposeEvidence","text":"imposeEvidence: fuction imposing evidence bayesian network.","code":""},{"path":"/reference/imposeEvidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"imposeEvidence: a fuction for imposing evidence in the bayesian network. — imposeEvidence","text":"","code":"imposeEvidence(bn)"},{"path":"/reference/imposeEvidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"imposeEvidence: a fuction for imposing evidence in the bayesian network. — imposeEvidence","text":"bn bayesian network (output buildBN function).","code":""},{"path":"/reference/imposeEvidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"imposeEvidence: a fuction for imposing evidence in the bayesian network. — imposeEvidence","text":"preprocessed bayesian network.","code":""},{"path":"/reference/initBN.fromPed.html","id":null,"dir":"Reference","previous_headings":"","what":"initBN.fromPed: a function to initialize the bayesian network. — initBN.fromPed","title":"initBN.fromPed: a function to initialize the bayesian network. — initBN.fromPed","text":"initBN.fromPed: function initialize bayesian network.","code":""},{"path":"/reference/initBN.fromPed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initBN.fromPed: a function to initialize the bayesian network. — initBN.fromPed","text":"","code":"initBN.fromPed(ped, bplotped)"},{"path":"/reference/initBN.fromPed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"initBN.fromPed: a function to initialize the bayesian network. — initBN.fromPed","text":"ped ped object Familias format. bplotped alternative ped object compared.","code":""},{"path":"/reference/initBN.fromPed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"initBN.fromPed: a function to initialize the bayesian network. — initBN.fromPed","text":"bayesian network.","code":""},{"path":"/reference/initBN.fromVars.html","id":null,"dir":"Reference","previous_headings":"","what":"initBN.fromVars: a function to initialize the bayesian network. — initBN.fromVars","title":"initBN.fromVars: a function to initialize the bayesian network. — initBN.fromVars","text":"initBN.fromVars: function initialize bayesian network.","code":""},{"path":"/reference/initBN.fromVars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initBN.fromVars: a function to initialize the bayesian network. — initBN.fromVars","text":"","code":"initBN.fromVars(bplotped)"},{"path":"/reference/initBN.fromVars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"initBN.fromVars: a function to initialize the bayesian network. — initBN.fromVars","text":"bplotped alternative ped object compared.","code":""},{"path":"/reference/initBN.fromVars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"initBN.fromVars: a function to initialize the bayesian network. — initBN.fromVars","text":"bayesian network.","code":""},{"path":"/reference/initBN.html","id":null,"dir":"Reference","previous_headings":"","what":"initBN: a function to initialize the bayesian network. — initBN","title":"initBN: a function to initialize the bayesian network. — initBN","text":"initBN: function initialize bayesian network.","code":""},{"path":"/reference/initBN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initBN: a function to initialize the bayesian network. — initBN","text":"","code":"initBN(ped = NULL, bplotped = FALSE)"},{"path":"/reference/initBN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"initBN: a function to initialize the bayesian network. — initBN","text":"ped ped object information genotyped members. ped object must Familias format. bplotped alternative ped object compared.","code":""},{"path":"/reference/initBN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"initBN: a function to initialize the bayesian network. — initBN","text":"bayesian network.","code":""},{"path":"/reference/is.linkdat.html","id":null,"dir":"Reference","previous_headings":"","what":"Is an object a linkdat object? — is.linkdat","title":"Is an object a linkdat object? — is.linkdat","text":"Functions checking whether object linkdat object, singletonfb list .","code":""},{"path":"/reference/is.linkdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is an object a linkdat object? — is.linkdat","text":"","code":"is.linkdat(x)  is.singletonfbfb(x)  is.linkdat.list(x)"},{"path":"/reference/is.linkdat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is an object a linkdat object? — is.linkdat","text":"x R object.","code":""},{"path":"/reference/is.linkdat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is an object a linkdat object? — is.linkdat","text":".linkdat: TRUE x linkdat (singletonfb) object, FALSE otherwise. .singletonfbfb: TRUE x singletonfb object, FALSE otherwise. .linkdat.list: TRUE x list linkdat/singletonfb objects.","code":""},{"path":"/reference/is.linkdat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is an object a linkdat object? — is.linkdat","text":"Note singletonfb class inherits linkdat, x singletonfb, .linkdat(x) returns TRUE.","code":""},{"path":[]},{"path":"/reference/likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Pedigree likelihood — likelihood.linkdat","title":"Pedigree likelihood — likelihood.linkdat","text":"Calculates various forms pedigree likelihoods based paramlink functions.","code":""},{"path":"/reference/likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pedigree likelihood — likelihood.linkdat","text":"","code":"likelihood.linkdat(   x,   locus1,   locus2 = NULL,   theta = NULL,   startdata = NULL,   eliminate = 0,   logbase = NULL,   loop_breakers = NULL,   ... )  likelihood.singleton(x, locus1, logbase = NULL, ...)"},{"path":"/reference/likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pedigree likelihood — likelihood.linkdat","text":"x linkdat object, singleton object, list objects. likelihood_LINKAGE, x must linkdat object, x$model different NULL. locus1 marker object compatible x. x list, locus1 must list corresponding marker objects. locus2 either NULL, character 'disease', markerfb object compatible x. See Details. theta recombination rate locus1 locus2 (likelihood_LINKAGE: marker disease locus).  make biological sense theta 0 0.5. startdata internal use. linkage computations -allelic markers. eliminate mostly internal use: non-negative integer indicating number iterations internal genotype-compatibility algorithm. Positive values can save time partialmarker non-empty number alleles large. logbase numeric, NULL. numeric log-likelihood returned, logbase basis logarithm. loop_breakers numeric containing IDs individuals used loop breakers. NULL, automatic selection loop breakers performed. ... arguments.","code":""},{"path":"/reference/likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pedigree likelihood — likelihood.linkdat","text":"likelihood data. parameter logbase positive number, output log(likelihood, logbase).","code":""},{"path":"/reference/likelihood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pedigree likelihood — likelihood.linkdat","text":"likelihoods calculated using Elston-Stewart algorithm.","code":""},{"path":"/reference/linkdat.html","id":null,"dir":"Reference","previous_headings":"","what":"Linkdat objects — linkdat","title":"Linkdat objects — linkdat","text":"function obtained paramlink package, longer maintained. Functions create display 'linkdat' objects.","code":""},{"path":"/reference/linkdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linkdat objects — linkdat","text":"","code":"linkdat(   ped,   model = NULL,   map = NULL,   dat = NULL,   freq = NULL,   annotations = NULL,   missing = 0,   header = FALSE,   checkped = TRUE,   verbose = TRUE,   ... )  singletonfb(id, sex = 1, famid = 1, verbose = FALSE, ...)  # S3 method for linkdat print(x, ..., markers)  # S3 method for linkdat summary(object, ...)  # S3 method for linkdat subset(x, subset = x$orig.ids, ..., markers = seq_len(x$nMark))"},{"path":"/reference/linkdat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linkdat objects — linkdat","text":"ped matrix, data.frame character path pedigree file standard LINKAGE format. (See details) model either linkdat.model object (typically y$model linkdat object y), single integer following meaning: 1 = autosomal dominant; 2 = autosomal recessive; 3 = X-linked dominant; 4 = X-linked recessive. cases, disease assumed fully penetrant disease allele frequency set 0.00001. model=NULL, model set. map character path map file MERLIN format, NULL. non-NULL, dat file must also given (next item). dat character path dat file MERLIN format, NULL. (needed map non-NULL.) freq character path allele frequency file MERLIN (short) format, NULL. NULL, markers interpreted equifrequent. annotations list (length order marker columns x) marker annotations. non-NULL, map, dat, freq NULL. missing character (length 1) used missing alleles. Defaults '0'. header logical, relevant ped points ped file: TRUE, first line ped file skipped. checkped logical. FALSE, checks pedigree errors performed. verbose logical: verbose output . ... arguments. id, sex single numerics describing individual ID gender singletonfb. famid numeric: family ID singletonfb. x, object linkdat object. markers numeric indicating markers included/printed. subset numeric containing individuals sub-pedigree extracted. NB: pedigree checking done , make sure subset form meaningful, closed pedigree.","code":""},{"path":"/reference/linkdat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linkdat objects — linkdat","text":"linkdat object, list linkdat objects. linkdat object essentially list following entries, can NULL. pedigree data.frame 5 columns (ID, FID, MID, SEX, AFF) describing pedigree linkage format. (NB: Internal labeling used.) orig.ids original individual id labels. nInd number individuals pedigree. founders vector founder individuals. (NB: Internal labeling used.) nonfounders vector nonfounder individuals (NB: Internal labeling used.) hasLoops logical: TRUE pedigree inbred. subnucs list containing (maximal) nuclear families pedigree. nuclear family given vector form c(pivot, father, mother, child1, ...), pivot either id individual linking nuclear family rest pedigree, 0 none. (NB: Internal labeling used.) markerdata list marker objects. nMark number markers. available numeric vector containing IDs available individuals. Used simulations plots. model linkdat.model object, essentially list containing model parameters. See setModel details. loop_breakers matrix original loop breaker ID's first column duplicates second column. set breakLoopsfb.","code":""},{"path":"/reference/linkdat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linkdat objects — linkdat","text":"file (matrix data.frame) ped must describe one several pedigrees standard LINKAGE format, .e. following columns correct order: 1 Family id (optional) (FAMID) 2 Individual id (ID), 3 Father id (FID), 4 Mother id (MID), 5 Gender (SEX): 1 = male, 2 = female, 6 Affection status (AFF): 1 = unaffected, 2 = affected, 0 = unknown, 7 First allele first marker, 8 Second allele first marker, 9 First allele second marker, .s.o. columns 2-6 mandatory. first column automatically interpreted family id repeated elements. Internally individuals relabelfbed 1,2,..., rarely concern end user. pedigree checking done, recommended plot pedigree analysis. Details formats map, dat frequency files can found online MERLIN tutorial: http://csg.sph.umich.edu/abecasis/Merlin/ singletonfb special linkdat object whose pedigree contains 1 individual. class attribute singletonfb c('singletonfb', 'linkdat')","code":""},{"path":[]},{"path":"/reference/markerSimfb.html","id":null,"dir":"Reference","previous_headings":"","what":"Marker simulation — markerSimfb","title":"Marker simulation — markerSimfb","text":"Simulates marker genotypes conditional pedigree structure, affection statuses disease model.","code":""},{"path":"/reference/markerSimfb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marker simulation — markerSimfb","text":"","code":"markerSimfb(   x,   N = 1,   available = NULL,   alleles = NULL,   afreq = NULL,   partialmarker = NULL,   loop_breakers = NULL,   eliminate = 0,   seed = NULL,   verbose = TRUE )"},{"path":"/reference/markerSimfb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marker simulation — markerSimfb","text":"x linkdat object N positive integer: number markers simulated available vector containing IDs available individuals, .e. whose genotypes simulated. default, individuals included. alleles vector containing alleles marker simulation. single integer given, interpreted number alleles, actual alleles 1:alleles. Must NULL partialmarker non-NULL. afreq vector length 2 containing population frequencies marker alleles. Must NULL partialmarker non-NULL. partialmarker Either NULL (resulting unconditional simulation), marker object (simulation conditioned) index existing marker x. loop_breakers numeric containing IDs individuals used loop breakers. Relevant pedigree loops, partialmarker non-NULL. See breakLoopsfb. eliminate non-negative integer, indicating number iterations internal genotype-compatibility algorithm. Positive values can save time partialmarker non-NULL number alleles large. seed NULL, numeric seed random number generator. verbose logical.","code":""},{"path":"/reference/markerSimfb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Marker simulation — markerSimfb","text":"linkdat object equal x except markerdata entry, consists N simulated markers.","code":""},{"path":"/reference/markerSimfb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Marker simulation — markerSimfb","text":"implements (various time savers) algorithm used SLINK LINKAGE/FASTLINK suite. partialmarker NULL, genotypes simulated simple gene dropping, using simpleSim.","code":""},{"path":"/reference/markerSimfb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Marker simulation — markerSimfb","text":"G. M. Lathrop, J.-M. Lalouel, C. Julier, J. Ott, Strategies Multilocus Analysis Humans, PNAS 81(1984), pp. 3443-3446.","code":""},{"path":[]},{"path":"/reference/markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Marker functions — markers","title":"Marker functions — markers","text":"Functions setting manipulating marker genotypes 'linkdat' objects compatible fbnet. extracted paramlink package, longer maintained.","code":""},{"path":"/reference/markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marker functions — markers","text":"","code":"markerfb(   x,   ...,   allelematrix,   alleles = NULL,   afreq = NULL,   missing = 0,   chrom = NA,   pos = NA,   name = NA,   mutmat = NULL )  addMarkerfb(x, m, ...)  SetMarkersfb(x, m, annotations = NULL, missing = 0)  modifyMarkerfb(x, marker, ids, genotype, alleles, afreq, chrom, name, pos)  getMarkersfb(   x,   markernames = NULL,   chroms = NULL,   fromPos = NULL,   toPos = NULL )  removeMarkersfb(   x,   markers = NULL,   markernames = NULL,   chroms = NULL,   fromPos = NULL,   toPos = NULL )  swapGenotypesfb(x, ids)  modifyMarkerfbMatrix(x, ids, new.alleles)"},{"path":"/reference/markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marker functions — markers","text":"x linkdat object ... even number vectors, indicating individuals genotypes. See examples. allelematrix matrix one row per pedigree member two columns per marker, containing alleles single marker. alleles numeric character vector containing allele names. afreq numerical vector allele frequencies. error given sum 1 (rounded 3 decimals). missing numeric - character - length 1, indicating code missing alleles. chrom NA integer (chromosome number marker). pos NA non-negative real number indicating genetic position (cM) marker. name NA character (name marker). mutmat mutation matrix, list two matrices named 'female' 'male'. matrix/matrices must square, allele labels dimnames, row must sum 1 (rounding 3 decimals). m marker object matrix alleles. (SetMarkersfb matrix can contain data several markers.) annotations list marker annotations. marker, markers numeric indicating marker(s) use/modify. ids numeric indicating individual(s) modified. swapGenotypesfb must length 2. genotype vector length 1 2, containing genotype given ids individuals. See examples. markernames NULL character vector. chroms NULL numeric vector chromosome numbers. fromPos, toPos NULL single numeric. new.alleles numerical matrix dimensions length(ids), 2*x$nMark. Entries refer internal allele numbering.","code":""},{"path":"/reference/markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Marker functions — markers","text":"marker function returns object class marker: numerical 2-column matrix one row per individual, attributes 'alleles' (character vector allele names), 'nalleles' (number alleles) 'missing' (input symbol missing marker alleles), 'chrom' (chromosome number), 'name' (marker identifier), 'pos' (chromosome position cM). addMarker, SetMarkersfb, removeMarkersfb, modifyMarkerfb, modifyMarkerfbMatrix swapGenotypesfb, linkdat object returned, whose markerdata element set/modified. getMarkersfb numeric vector containing marker numbers (.e. indices x$markerdata) markers whose 'name' attribute contained markernames, 'chrom' attribute contained chroms, 'pos' attribute . NULL arguments skipped, getMarkersfb(x) return seq_len(x$nMark) (.e. markers).","code":""},{"path":[]},{"path":"/reference/mendelianCheckfb.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Mendelian errors — mendelianCheckfb","title":"Check for Mendelian errors — mendelianCheckfb","text":"Check marker data Mendelian inconsistencies","code":""},{"path":"/reference/mendelianCheckfb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Mendelian errors — mendelianCheckfb","text":"","code":"mendelianCheckfb(x, remove = FALSE, verbose = !remove)"},{"path":"/reference/mendelianCheckfb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Mendelian errors — mendelianCheckfb","text":"x linkdat object remove logical. FALSE, function returns indices markers found incorrect.  TRUE, new linkdat object returned, incorrect markers deleted. verbose logical. TRUE, details markers failing tests shown.","code":""},{"path":"/reference/mendelianCheckfb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Mendelian errors — mendelianCheckfb","text":"numeric containing indices markers pass tests, (remove=TRUE) new linkdat object failing markers removed.","code":""},{"path":"/reference/minOrdering.html","id":null,"dir":"Reference","previous_headings":"","what":"minOrdering: a function for getting an ordering of bayesian network variables not in Q using min fill criteria on interaction graphs. — minOrdering","title":"minOrdering: a function for getting an ordering of bayesian network variables not in Q using min fill criteria on interaction graphs. — minOrdering","text":"minOrdering: function getting ordering bayesian network variables Q using min fill criteria interaction graphs.","code":""},{"path":"/reference/minOrdering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"minOrdering: a function for getting an ordering of bayesian network variables not in Q using min fill criteria on interaction graphs. — minOrdering","text":"","code":"minOrdering(bn, vars = NULL, method = c(\"min_degree\", \"min_fill\")[1])"},{"path":"/reference/minOrdering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"minOrdering: a function for getting an ordering of bayesian network variables not in Q using min fill criteria on interaction graphs. — minOrdering","text":"bn bayesian network pedigree object information genotyped members. ped object must Familias format. vars Subset tables order calculated method Elimination method, min_degree min_fill","code":""},{"path":"/reference/minOrdering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"minOrdering: a function for getting an ordering of bayesian network variables not in Q using min fill criteria on interaction graphs. — minOrdering","text":"bayesian network ordering process.","code":""},{"path":"/reference/pbn.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepared pedigree for bayesian network trimming. — pbn","title":"Prepared pedigree for bayesian network trimming. — pbn","text":"Prepared pedigree bayesian network trimming.","code":""},{"path":"/reference/pbn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepared pedigree for bayesian network trimming. — pbn","text":"","code":"pbn"},{"path":"/reference/pbn.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Prepared pedigree for bayesian network trimming. — pbn","text":"data.matrix.","code":""},{"path":"/reference/pedModify.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify the pedigree of 'linkdat' objects — pedModify","title":"Modify the pedigree of 'linkdat' objects — pedModify","text":"Functions modify pedigree 'linkdat' object.","code":""},{"path":"/reference/pedModify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify the pedigree of 'linkdat' objects — pedModify","text":"","code":"addOffspring(   x,   father,   mother,   noffs,   ids = NULL,   sex = 1,   aff = 1,   verbose = TRUE )  removeIndividualsfb(x, ids, verbose = TRUE)  trim(x, keep = c(\"available\", \"affected\"), return.ids = FALSE, verbose = TRUE)  relabelfb(x, new, old)"},{"path":"/reference/pedModify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify the pedigree of 'linkdat' objects — pedModify","text":"x linkdat object father, mother Integers indicating IDs parentsfb. missing, new founder individual created (whose ID 1+largest ID already pedigree). noffs single integer indicating number offspringfb created. ids individuals sex, aff Integer vectors indicating gender affection statuses offspringfb created (recycled less noffs elements). verbose logical: Verbose output . keep character, either 'available' (trimming pedigree unavailable members) 'affected' (trimming unaffected members). return.ids logical. FALSE, trimmed pedigree returned new linkdat object. TRUE, vector containing IDs 'removable' individuals returned new numeric containing new labels replace old. old numeric containing ID labels replaced new. missing, old set x$orig.ids, .e. members original order.","code":""},{"path":"/reference/pedModify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify the pedigree of 'linkdat' objects — pedModify","text":"modified linkdat object.","code":""},{"path":"/reference/pedModify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify the pedigree of 'linkdat' objects — pedModify","text":"removing individual, descendantsfb also removed well founders remaining without offspringfb.","code":""},{"path":[]},{"path":"/reference/pedParts.html","id":null,"dir":"Reference","previous_headings":"","what":"Pedigree subsets — pedParts","title":"Pedigree subsets — pedParts","text":"Utility functions 'linkdat' objects, mainly extracting various pedigree information.","code":""},{"path":"/reference/pedParts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pedigree subsets — pedParts","text":"","code":"offspringfb(x, id, original.id = TRUE)  spousesfb(x, id, original.id = TRUE)  related.pairs(   x,   relation = c(\"parentsfb\", \"siblingsfb\", \"grandparentsfbfb\", \"nephews_niecesfb\",     \"cousins\", \"spousesfb\", \"unrelatedfb\"),   available = F,   interfam = c(\"none\", \"founders\", \"all\"),   ... )  unrelatedfb(x, id, original.id = TRUE)  leavesfb(x)  parentsfb(x, id, original.id = TRUE)  grandparentsfbfb(x, id, degree = 2, original.id = TRUE)  siblingsfb(x, id, half = NA, original.id = TRUE)  cousins(x, id, degree = 1, removal = 0, half = NA, original.id = TRUE)  nephews_niecesfb(x, id, removal = 1, half = NA, original.id = TRUE)  ancestorsfb(x, id)  descendantsfb(x, id, original.id = TRUE)"},{"path":"/reference/pedParts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pedigree subsets — pedParts","text":"x linkdat object. related.pairs possibly list linkdat objects. id numerical ID label. original.id logical indicating whether 'id' refers original ID label internal labeling. relation one words (possibly truncated) parentsfb, siblingsfb, grandparentsfbfb, nephews_niecesfb, cousins, spousesfb, unrelatedfb. available logical, TRUE pairs available individuals returned. interfam one words (possibly truncated) none, founders , specifying interfamiliar pairs included unrelatedfb case x list several pedigrees. none, intrafamiliar pairs considered; founders interfamiliar pairs (available) founders included; , interfamiliar (available) pairs included. ... parameters degree non-negative integer. half logical NA. TRUE (resp FALSE), half (resp. full) siblingsfb/cousins/nephews/nieces returned. NA, categories included. removal non-negative integer","code":""},{"path":"/reference/pedParts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pedigree subsets — pedParts","text":"ancestorsfb(x,id), vector containing ID's ancestorsfb individual id.  descendantsfb(x,id), vector containing ID's descendantsfb (.e. children, grandchildren, .s.o.) individual id. functions cousins, grandparentsfbfb, nephews_niecesfb, offspringfb, parentsfb, siblingsfb, spousesfb, unrelatedfb, returns integer vector containing ID's pedigree members specified relationship id. related.pairs matrix two columns. row gives pair pedigree members specified relation. input list multiple pedigrees, matrix entries characters form 'X-Y' X family ID Y individual ID person. leavesfb, vector IDs containing pedigree members without children.","code":""},{"path":"/reference/pedigreeLoops.html","id":null,"dir":"Reference","previous_headings":"","what":"Pedigree loops — pedigreeLoops","title":"Pedigree loops — pedigreeLoops","text":"Functions identifying, breaking restoring loops pedigrees.","code":""},{"path":"/reference/pedigreeLoops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pedigree loops — pedigreeLoops","text":"","code":"pedigreeLoops(x)  breakLoopsfb(x, loop_breakers = NULL, verbose = TRUE)  tieLoopsfb(x)  findLoopBreakersfb(x)  findLoopBreakersfb2(x)"},{"path":"/reference/pedigreeLoops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pedigree loops — pedigreeLoops","text":"x linkdat object. loop_breakers either NULL (resulting automatic selection loop breakers) numeric containing IDs individuals used loop breakers. verbose logical: Verbose output ?","code":""},{"path":"/reference/pedigreeLoops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pedigree loops — pedigreeLoops","text":"breakLoopsfb, linkdat object indicated loop breakers duplicated. returned object also non-null loop_breakers entry, namely matrix IDs original loop breakers first column duplicates second. tieLoopsfb, linkdat object duplicated individuals (given x$loop_breakers entry) merged. linkdat object x, call tieLoopsfb(breakLoopsfb(x)) return x. pedigreeLoops, list containing inbreeding loops (marriage loops) found pedigree. loop represented list elements 'top', 'bottom' individual, 'pathA' (individuals forming path top bottom) 'pathB' (creating different path top bottom, individuals common pathA). Note number loops reported counts closed paths pedigree general larger genus underlying graph. findLoopBreakersfb findLoopBreakersfb2, numeric vector individual ID's.","code":""},{"path":"/reference/pedigreeLoops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pedigree loops — pedigreeLoops","text":"paramlink's handling pedigree loops done hood - using functions described - without need explicit action end users. linkdat object x created, internal routine detects pedigree contains loops, case x$hasLoops set TRUE. analyses x loops must broken (e.g. lod score computation marker simulation), done automatically calling breakLoopsfb. cases complex inbreeding, can instructive plot pedigree breaking loops. Duplicated individuals plotted appropriate labels (see examples). function findLoopBreakersfb identifies set individuals breaking inbreeding loops, marriage loops. require machinery efficient detection, paramlink separate function, findLoopBreakersfb2, utilizing methods igraph package. Since rarely needed users, igraph imported loading paramlink, findLoopBreakersfb2 called. practice, breakLoopsfb first calls findLoopBreakersfb breaks returned individuals. resulting linkdat object still loops, findLoopBreakersfb2 called break marriage loops.","code":""},{"path":"/reference/preparePed.html","id":null,"dir":"Reference","previous_headings":"","what":"preparePed: a function for simulating genetic data from untyped individuals conditioned on known genotypes. — preparePed","title":"preparePed: a function for simulating genetic data from untyped individuals conditioned on known genotypes. — preparePed","text":"preparePed: function simulating genetic data untyped individuals conditioned known genotypes.","code":""},{"path":"/reference/preparePed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"preparePed: a function for simulating genetic data from untyped individuals conditioned on known genotypes. — preparePed","text":"","code":"preparePed(ped, available, lLociFreq, rseed = NULL)"},{"path":"/reference/preparePed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"preparePed: a function for simulating genetic data from untyped individuals conditioned on known genotypes. — preparePed","text":"ped ped object information genotyped members. ped object must Familias format. available Genotyped individuals IDs. lLociFreq Allele frequencies. rseed Seed used simulations.","code":""},{"path":"/reference/preparePed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"preparePed: a function for simulating genetic data from untyped individuals conditioned on known genotypes. — preparePed","text":"ped object.","code":""},{"path":"/reference/prodFactor.html","id":null,"dir":"Reference","previous_headings":"","what":"prodFactor: a function for performing product between probability tables. — prodFactor","title":"prodFactor: a function for performing product between probability tables. — prodFactor","text":"prodFactor: function performing product probability tables.","code":""},{"path":"/reference/prodFactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prodFactor: a function for performing product between probability tables. — prodFactor","text":"","code":"prodFactor(laux)"},{"path":"/reference/prodFactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prodFactor: a function for performing product between probability tables. — prodFactor","text":"laux probability distribution aux","code":""},{"path":"/reference/prodFactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prodFactor: a function for performing product between probability tables. — prodFactor","text":"dataframe probabilities.","code":""},{"path":"/reference/pruneNodes.html","id":null,"dir":"Reference","previous_headings":"","what":"pruneNodes: a fuction for clasical pruning in bayesian networks. — pruneNodes","title":"pruneNodes: a fuction for clasical pruning in bayesian networks. — pruneNodes","text":"pruneNodes: fuction clasical pruning bayesian networks.","code":""},{"path":"/reference/pruneNodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pruneNodes: a fuction for clasical pruning in bayesian networks. — pruneNodes","text":"","code":"pruneNodes(bn)"},{"path":"/reference/pruneNodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pruneNodes: a fuction for clasical pruning in bayesian networks. — pruneNodes","text":"bn bayesian network (output buildBN function).","code":""},{"path":"/reference/pruneNodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pruneNodes: a fuction for clasical pruning in bayesian networks. — pruneNodes","text":"preprocessed bayesian network.","code":""},{"path":"/reference/removeEvidenceFromPed.html","id":null,"dir":"Reference","previous_headings":"","what":"removeEvidenceFromPed: a function for removing evidence from specific individuals in a ped object. — removeEvidenceFromPed","title":"removeEvidenceFromPed: a function for removing evidence from specific individuals in a ped object. — removeEvidenceFromPed","text":"removeEvidenceFromPed: function removing evidence specific individuals ped object.","code":""},{"path":"/reference/removeEvidenceFromPed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"removeEvidenceFromPed: a function for removing evidence from specific individuals in a ped object. — removeEvidenceFromPed","text":"","code":"removeEvidenceFromPed(pped, idNotEv)"},{"path":"/reference/removeEvidenceFromPed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"removeEvidenceFromPed: a function for removing evidence from specific individuals in a ped object. — removeEvidenceFromPed","text":"pped ped object information genotyped members. ped object must Familias format. idNotEv set individuals evidence removed.","code":""},{"path":"/reference/removeEvidenceFromPed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"removeEvidenceFromPed: a function for removing evidence from specific individuals in a ped object. — removeEvidenceFromPed","text":"ped object.","code":""},{"path":"/reference/reportLR.html","id":null,"dir":"Reference","previous_headings":"","what":"reportLR: a function for calculating the LRs of specified genotypes in a pedigree. — reportLR","title":"reportLR: a function for calculating the LRs of specified genotypes in a pedigree. — reportLR","text":"reportLR: function calculating LRs specified genotypes pedigree.","code":""},{"path":"/reference/reportLR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reportLR: a function for calculating the LRs of specified genotypes in a pedigree. — reportLR","text":"","code":"reportLR(bn, resQ, geno = NULL)"},{"path":"/reference/reportLR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reportLR: a function for calculating the LRs of specified genotypes in a pedigree. — reportLR","text":"bn bayesian network pedigree object information genotyped members. ped object must Familias format. resQ List CPTs. geno data.frame genotypes.","code":""},{"path":"/reference/reportLR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reportLR: a function for calculating the LRs of specified genotypes in a pedigree. — reportLR","text":"dataframe LRs.","code":""},{"path":"/reference/reportPQ.html","id":null,"dir":"Reference","previous_headings":"","what":"reportPQ: a function for calculating the probability of specified genotypes in a pedigree. — reportPQ","title":"reportPQ: a function for calculating the probability of specified genotypes in a pedigree. — reportPQ","text":"reportPQ: function calculating probability specified genotypes pedigree.","code":""},{"path":"/reference/reportPQ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reportPQ: a function for calculating the probability of specified genotypes in a pedigree. — reportPQ","text":"","code":"reportPQ(bn, resQ, geno = NULL)"},{"path":"/reference/reportPQ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reportPQ: a function for calculating the probability of specified genotypes in a pedigree. — reportPQ","text":"bn bayesian network pedigree object information genotyped members. ped object must Familias format. resQ List CPTs. geno data.frame genotypes.","code":""},{"path":"/reference/reportPQ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reportPQ: a function for calculating the probability of specified genotypes in a pedigree. — reportPQ","text":"dataframe genotype probabilities.","code":""},{"path":"/reference/reverseSplit.html","id":null,"dir":"Reference","previous_headings":"","what":"reverseSpit: a function for formatting. — reverseSplit","title":"reverseSpit: a function for formatting. — reverseSplit","text":"reverseSpit: function formatting.","code":""},{"path":"/reference/reverseSplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reverseSpit: a function for formatting. — reverseSplit","text":"","code":"reverseSplit(inList)"},{"path":"/reference/reverseSplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reverseSpit: a function for formatting. — reverseSplit","text":"inList input formatting.","code":""},{"path":"/reference/reverseSplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reverseSpit: a function for formatting. — reverseSplit","text":"bayesian network.","code":""},{"path":"/reference/setAvailable.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for modifying availability vectors — setAvailable","title":"Functions for modifying availability vectors — setAvailable","text":"Functions set modify availability vector 'linkdat' object. vector used 'linkage.power' 'linkageSim', indicating genotypes simulated.","code":""},{"path":"/reference/setAvailable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for modifying availability vectors — setAvailable","text":"","code":"setAvailable(x, available)  swapAvailable(x, ids)"},{"path":"/reference/setAvailable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions for modifying availability vectors — setAvailable","text":"x linkdat object available numeric containing IDs available individuals. ids individuals","code":""},{"path":"/reference/setAvailable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions for modifying availability vectors — setAvailable","text":"modified linkdat object.","code":""},{"path":[]},{"path":"/reference/setModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, change or display the model parameters for 'linkdat' objects — setModel","title":"Set, change or display the model parameters for 'linkdat' objects — setModel","text":"Functions set, change display model parameters involved parametric linkage analysis.","code":""},{"path":"/reference/setModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, change or display the model parameters for 'linkdat' objects — setModel","text":"","code":"setModel(x, model = NULL, chrom = NULL, penetrances = NULL, dfreq = NULL)  # S3 method for linkdat.model print(x, ...)"},{"path":"/reference/setModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, change or display the model parameters for 'linkdat' objects — setModel","text":"x setModel: linkdat object. print.linkdat.model: linkdat.model object. model NULL, object class linkdat.model, namely list elements chrom, penetrances dfreq.  setModel function, model argument can one integers 1-4, following meanings: 1 = autosomal dominant; fully penetrant, dfreq=1e-5 2 = autosomal recessive; fully penetrant, dfreq=1e-5 3 = X-linked dominant; fully penetrant, dfreq=1e-5 4 = X-linked recessive; fully penetrant, dfreq=1e-5 chrom character, either 'AUTOSOMAL' 'X'. Lower case versions allowed converted automatically. penetrances chrom=='AUTOSOMAL': numeric length 3 - (f0, f1, f2) - fi probability affected given disease alleles. chrom=='X': list two vectors, containing penetrances sex: penetrances = list(male=c(f0, f1), female=c(f0, f1, f2)). dfreq population frequency disease allele. ... parameters","code":""},{"path":"/reference/setModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, change or display the model parameters for 'linkdat' objects — setModel","text":"setModel returns new linkdat object, whose model entry linkdat.model object: list containing given chrom, penetrances dfreq.","code":""},{"path":[]},{"path":"/reference/setOrdering.html","id":null,"dir":"Reference","previous_headings":"","what":"setOrdering: a function for selecting the ordering method in the elimination process. — setOrdering","title":"setOrdering: a function for selecting the ordering method in the elimination process. — setOrdering","text":"setOrdering: function selecting ordering method elimination process.","code":""},{"path":"/reference/setOrdering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setOrdering: a function for selecting the ordering method in the elimination process. — setOrdering","text":"","code":"setOrdering(bn, ordMethod, vars = NULL, orderElim = NULL)"},{"path":"/reference/setOrdering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setOrdering: a function for selecting the ordering method in the elimination process. — setOrdering","text":"bn bayesian network pedigree object information genotyped members. ped object must Familias format. ordMethod Ordering method. vars Vars orderElim Order elimination criteria.","code":""},{"path":"/reference/setOrdering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"setOrdering: a function for selecting the ordering method in the elimination process. — setOrdering","text":"bayesian network ordering process.","code":""},{"path":"/reference/simpleSimfb.html","id":null,"dir":"Reference","previous_headings":"","what":"Unconditional marker simulation — simpleSimfb","title":"Unconditional marker simulation — simpleSimfb","text":"Unconditional simulation unlinked markers","code":""},{"path":"/reference/simpleSimfb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unconditional marker simulation — simpleSimfb","text":"","code":"simpleSimfb(   x,   N,   alleles,   afreq,   available,   Xchrom = FALSE,   mutmat = NULL,   seed = NULL,   verbose = T )"},{"path":"/reference/simpleSimfb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unconditional marker simulation — simpleSimfb","text":"x linkdat object N positive integer: number markers simulated alleles vector containing allele names. missing, alleles taken seq_along(afreq). afreq vector length 2 containing population frequencies alleles. missing, alleles assumed equifrequent. available vector containing IDs available individuals, .e. whose genotypes simulated. Xchrom logical: X linked markers ? mutmat mutation matrix, list two matrices named 'female' 'male'. matrix/matrices must square, allele labels dimnames, row must sum 1 (rounding 3 decimals). seed NULL, numeric seed random number generator. verbose logical.","code":""},{"path":"/reference/simpleSimfb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unconditional marker simulation — simpleSimfb","text":"dat object equal x respects except markerdata entry, consists N simulated markers.","code":""},{"path":"/reference/simpleSimfb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unconditional marker simulation — simpleSimfb","text":"simulation done distributing alleles randomly founders, followed unconditional gene dropping throughout pedigree (.e. non-founder random allele selected parentsfb). Finally genotypes individuals included available removed.","code":""},{"path":[]},{"path":"/reference/stateRemoval.html","id":null,"dir":"Reference","previous_headings":"","what":"stateRemoval: a function for processing the bayesian network. — stateRemoval","title":"stateRemoval: a function for processing the bayesian network. — stateRemoval","text":"stateRemoval: function processing bayesian network.","code":""},{"path":"/reference/stateRemoval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stateRemoval: a function for processing the bayesian network. — stateRemoval","text":"","code":"stateRemoval(bn)"},{"path":"/reference/stateRemoval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stateRemoval: a function for processing the bayesian network. — stateRemoval","text":"bn bayesian network (output buildBN function).","code":""},{"path":"/reference/stateRemoval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stateRemoval: a function for processing the bayesian network. — stateRemoval","text":"preprocessed bayesian network.","code":""},{"path":"/reference/stateRemoval2.html","id":null,"dir":"Reference","previous_headings":"","what":"stateRemoval2: a function for processing the bayesian network. It implements another approach from the described in stateRemoval function. — stateRemoval2","title":"stateRemoval2: a function for processing the bayesian network. It implements another approach from the described in stateRemoval function. — stateRemoval2","text":"stateRemoval2: function processing bayesian network. implements another approach described stateRemoval function.","code":""},{"path":"/reference/stateRemoval2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stateRemoval2: a function for processing the bayesian network. It implements another approach from the described in stateRemoval function. — stateRemoval2","text":"","code":"stateRemoval2(bn, verbose = FALSE)"},{"path":"/reference/stateRemoval2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stateRemoval2: a function for processing the bayesian network. It implements another approach from the described in stateRemoval function. — stateRemoval2","text":"bn bayesian network (output buildBN function). verbose Computation output.","code":""},{"path":"/reference/stateRemoval2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stateRemoval2: a function for processing the bayesian network. It implements another approach from the described in stateRemoval function. — stateRemoval2","text":"preprocessed bayesian network.","code":""},{"path":"/reference/stateRemovalSubnucs.html","id":null,"dir":"Reference","previous_headings":"","what":"stateRemovalSubnucs: a fuctiong for variable state pruning. — stateRemovalSubnucs","title":"stateRemovalSubnucs: a fuctiong for variable state pruning. — stateRemovalSubnucs","text":"stateRemovalSubnucs: fuctiong variable state pruning.","code":""},{"path":"/reference/stateRemovalSubnucs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"stateRemovalSubnucs: a fuctiong for variable state pruning. — stateRemovalSubnucs","text":"","code":"stateRemovalSubnucs(bn, verbose = FALSE)"},{"path":"/reference/stateRemovalSubnucs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"stateRemovalSubnucs: a fuctiong for variable state pruning. — stateRemovalSubnucs","text":"bn bayesian network (output buildBN function). verbose Computation output.","code":""},{"path":"/reference/stateRemovalSubnucs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"stateRemovalSubnucs: a fuctiong for variable state pruning. — stateRemovalSubnucs","text":"preprocessed bayesian network.","code":""},{"path":"/reference/sumFactor.html","id":null,"dir":"Reference","previous_headings":"","what":"prodFactor: a function for performing sum between probability tables. — sumFactor","title":"prodFactor: a function for performing sum between probability tables. — sumFactor","text":"prodFactor: function performing sum probability tables.","code":""},{"path":"/reference/sumFactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prodFactor: a function for performing sum between probability tables. — sumFactor","text":"","code":"sumFactor(cpt, Z)"},{"path":"/reference/sumFactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prodFactor: a function for performing sum between probability tables. — sumFactor","text":"cpt Conditional probability table Z factor","code":""},{"path":"/reference/sumFactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prodFactor: a function for performing sum between probability tables. — sumFactor","text":"dataframe probabilities.","code":""},{"path":"/reference/toybase.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy allele frequency database. — toybase","title":"Toy allele frequency database. — toybase","text":"Toy allele frequency database.","code":""},{"path":"/reference/toybase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy allele frequency database. — toybase","text":"","code":"toybase"},{"path":"/reference/toybase.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy allele frequency database. — toybase","text":"data frame two markers allele frequencies","code":""},{"path":"/reference/toyped.html","id":null,"dir":"Reference","previous_headings":"","what":"STRs allelic frequencies from specified country. — toyped","title":"STRs allelic frequencies from specified country. — toyped","text":"STRs allelic frequencies specified country.","code":""},{"path":"/reference/toyped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"STRs allelic frequencies from specified country. — toyped","text":"","code":"toyped"},{"path":"/reference/toyped.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"STRs allelic frequencies from specified country. — toyped","text":"toy pedigree. Nuclear family.","code":""},{"path":"/reference/velim.bn.html","id":null,"dir":"Reference","previous_headings":"","what":"velim.bn: a function for variable elimination in a bayesian network. — velim.bn","title":"velim.bn: a function for variable elimination in a bayesian network. — velim.bn","text":"velim.bn: function variable elimination bayesian network.","code":""},{"path":"/reference/velim.bn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"velim.bn: a function for variable elimination in a bayesian network. — velim.bn","text":"","code":"velim.bn(   bn,   ordMethod = c(\"id\", \"min_degree\", \"min_fill\", \"fixed\")[2],   orderElim = NULL,   verbose = FALSE )"},{"path":"/reference/velim.bn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"velim.bn: a function for variable elimination in a bayesian network. — velim.bn","text":"bn bayesian network pedigree object information genotyped members. ped object must Familias format. ordMethod Selected ordering method id, min_degree, min_fill fixed. orderElim Elimination order. verbose Computation output.","code":""},{"path":"/reference/velim.bn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"velim.bn: a function for variable elimination in a bayesian network. — velim.bn","text":"Variable elimination result.","code":""},{"path":"/reference/velim.bn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"velim.bn: a function for variable elimination in a bayesian network. — velim.bn","text":"","code":"bnet <- buildBN(pbn,QP=3) #> Error in buildBN(pbn, QP = 3): object 'pbn' not found bn1  <- buildCPTs(bnet) #> Error in buildCPTs(bnet): object 'bnet' not found resQ <- velim.bn(bn1,ordMethod=\"min_fill\",verbose=FALSE) #> Error in velim.bn(bn1, ordMethod = \"min_fill\", verbose = FALSE): object 'bn1' not found"}]
